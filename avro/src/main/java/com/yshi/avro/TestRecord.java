/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yshi.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7704588679580531722L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"com.yshi.avro\",\"fields\":[{\"name\":\"recordId\",\"type\":\"string\"},{\"name\":\"longField\",\"type\":\"long\",\"default\":-1},{\"name\":\"intField\",\"type\":\"int\",\"default\":1},{\"name\":\"decimalType\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":7,\"scale\":2},\"default\":\"\\u0000000\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence recordId;
  @Deprecated public long longField;
  @Deprecated public int intField;
  @Deprecated public java.math.BigDecimal decimalType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecord() {}

  /**
   * All-args constructor.
   * @param recordId The new value for recordId
   * @param longField The new value for longField
   * @param intField The new value for intField
   * @param decimalType The new value for decimalType
   */
  public TestRecord(java.lang.CharSequence recordId, java.lang.Long longField, java.lang.Integer intField, java.math.BigDecimal decimalType) {
    this.recordId = recordId;
    this.longField = longField;
    this.intField = intField;
    this.decimalType = decimalType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return recordId;
    case 1: return longField;
    case 2: return intField;
    case 3: return decimalType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      DECIMAL_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: recordId = (java.lang.CharSequence)value$; break;
    case 1: longField = (java.lang.Long)value$; break;
    case 2: intField = (java.lang.Integer)value$; break;
    case 3: decimalType = (java.math.BigDecimal)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'recordId' field.
   * @return The value of the 'recordId' field.
   */
  public java.lang.CharSequence getRecordId() {
    return recordId;
  }

  /**
   * Sets the value of the 'recordId' field.
   * @param value the value to set.
   */
  public void setRecordId(java.lang.CharSequence value) {
    this.recordId = value;
  }

  /**
   * Gets the value of the 'longField' field.
   * @return The value of the 'longField' field.
   */
  public java.lang.Long getLongField() {
    return longField;
  }

  /**
   * Sets the value of the 'longField' field.
   * @param value the value to set.
   */
  public void setLongField(java.lang.Long value) {
    this.longField = value;
  }

  /**
   * Gets the value of the 'intField' field.
   * @return The value of the 'intField' field.
   */
  public java.lang.Integer getIntField() {
    return intField;
  }

  /**
   * Sets the value of the 'intField' field.
   * @param value the value to set.
   */
  public void setIntField(java.lang.Integer value) {
    this.intField = value;
  }

  /**
   * Gets the value of the 'decimalType' field.
   * @return The value of the 'decimalType' field.
   */
  public java.math.BigDecimal getDecimalType() {
    return decimalType;
  }

  /**
   * Sets the value of the 'decimalType' field.
   * @param value the value to set.
   */
  public void setDecimalType(java.math.BigDecimal value) {
    this.decimalType = value;
  }

  /**
   * Creates a new TestRecord RecordBuilder.
   * @return A new TestRecord RecordBuilder
   */
  public static com.yshi.avro.TestRecord.Builder newBuilder() {
    return new com.yshi.avro.TestRecord.Builder();
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static com.yshi.avro.TestRecord.Builder newBuilder(com.yshi.avro.TestRecord.Builder other) {
    return new com.yshi.avro.TestRecord.Builder(other);
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing TestRecord instance.
   * @param other The existing instance to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static com.yshi.avro.TestRecord.Builder newBuilder(com.yshi.avro.TestRecord other) {
    return new com.yshi.avro.TestRecord.Builder(other);
  }

  /**
   * RecordBuilder for TestRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecord>
    implements org.apache.avro.data.RecordBuilder<TestRecord> {

    private java.lang.CharSequence recordId;
    private long longField;
    private int intField;
    private java.math.BigDecimal decimalType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yshi.avro.TestRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.recordId)) {
        this.recordId = data().deepCopy(fields()[0].schema(), other.recordId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longField)) {
        this.longField = data().deepCopy(fields()[1].schema(), other.longField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intField)) {
        this.intField = data().deepCopy(fields()[2].schema(), other.intField);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.decimalType)) {
        this.decimalType = data().deepCopy(fields()[3].schema(), other.decimalType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TestRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yshi.avro.TestRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.recordId)) {
        this.recordId = data().deepCopy(fields()[0].schema(), other.recordId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longField)) {
        this.longField = data().deepCopy(fields()[1].schema(), other.longField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.intField)) {
        this.intField = data().deepCopy(fields()[2].schema(), other.intField);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.decimalType)) {
        this.decimalType = data().deepCopy(fields()[3].schema(), other.decimalType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'recordId' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecordId() {
      return recordId;
    }

    /**
      * Sets the value of the 'recordId' field.
      * @param value The value of 'recordId'.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder setRecordId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.recordId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'recordId' field has been set.
      * @return True if the 'recordId' field has been set, false otherwise.
      */
    public boolean hasRecordId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'recordId' field.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder clearRecordId() {
      recordId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'longField' field.
      * @return The value.
      */
    public java.lang.Long getLongField() {
      return longField;
    }

    /**
      * Sets the value of the 'longField' field.
      * @param value The value of 'longField'.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder setLongField(long value) {
      validate(fields()[1], value);
      this.longField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'longField' field has been set.
      * @return True if the 'longField' field has been set, false otherwise.
      */
    public boolean hasLongField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'longField' field.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder clearLongField() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'intField' field.
      * @return The value.
      */
    public java.lang.Integer getIntField() {
      return intField;
    }

    /**
      * Sets the value of the 'intField' field.
      * @param value The value of 'intField'.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder setIntField(int value) {
      validate(fields()[2], value);
      this.intField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'intField' field has been set.
      * @return True if the 'intField' field has been set, false otherwise.
      */
    public boolean hasIntField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'intField' field.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder clearIntField() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimalType' field.
      * @return The value.
      */
    public java.math.BigDecimal getDecimalType() {
      return decimalType;
    }

    /**
      * Sets the value of the 'decimalType' field.
      * @param value The value of 'decimalType'.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder setDecimalType(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.decimalType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'decimalType' field has been set.
      * @return True if the 'decimalType' field has been set, false otherwise.
      */
    public boolean hasDecimalType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'decimalType' field.
      * @return This builder.
      */
    public com.yshi.avro.TestRecord.Builder clearDecimalType() {
      decimalType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TestRecord build() {
      try {
        TestRecord record = new TestRecord();
        record.recordId = fieldSetFlags()[0] ? this.recordId : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.longField = fieldSetFlags()[1] ? this.longField : (java.lang.Long) defaultValue(fields()[1], record.getConversion(1));
        record.intField = fieldSetFlags()[2] ? this.intField : (java.lang.Integer) defaultValue(fields()[2], record.getConversion(2));
        record.decimalType = fieldSetFlags()[3] ? this.decimalType : (java.math.BigDecimal) defaultValue(fields()[3], record.getConversion(3));
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
