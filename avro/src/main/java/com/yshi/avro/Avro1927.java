/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yshi.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Avro1927 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3738653312296612799L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Avro1927\",\"namespace\":\"com.yshi.avro\",\"fields\":[{\"name\":\"myField\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String myField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Avro1927() {}

  /**
   * All-args constructor.
   * @param myField The new value for myField
   */
  public Avro1927(java.lang.String myField) {
    this.myField = myField;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myField;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myField = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myField' field.
   * @return The value of the 'myField' field.
   */
  public java.lang.String getMyField() {
    return myField;
  }

  /**
   * Sets the value of the 'myField' field.
   * @param value the value to set.
   */
  public void setMyField(java.lang.String value) {
    this.myField = value;
  }

  /**
   * Creates a new Avro1927 RecordBuilder.
   * @return A new Avro1927 RecordBuilder
   */
  public static com.yshi.avro.Avro1927.Builder newBuilder() {
    return new com.yshi.avro.Avro1927.Builder();
  }

  /**
   * Creates a new Avro1927 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Avro1927 RecordBuilder
   */
  public static com.yshi.avro.Avro1927.Builder newBuilder(com.yshi.avro.Avro1927.Builder other) {
    return new com.yshi.avro.Avro1927.Builder(other);
  }

  /**
   * Creates a new Avro1927 RecordBuilder by copying an existing Avro1927 instance.
   * @param other The existing instance to copy.
   * @return A new Avro1927 RecordBuilder
   */
  public static com.yshi.avro.Avro1927.Builder newBuilder(com.yshi.avro.Avro1927 other) {
    return new com.yshi.avro.Avro1927.Builder(other);
  }

  /**
   * RecordBuilder for Avro1927 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Avro1927>
    implements org.apache.avro.data.RecordBuilder<Avro1927> {

    private java.lang.String myField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yshi.avro.Avro1927.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myField)) {
        this.myField = data().deepCopy(fields()[0].schema(), other.myField);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Avro1927 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yshi.avro.Avro1927 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.myField)) {
        this.myField = data().deepCopy(fields()[0].schema(), other.myField);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'myField' field.
      * @return The value.
      */
    public java.lang.String getMyField() {
      return myField;
    }

    /**
      * Sets the value of the 'myField' field.
      * @param value The value of 'myField'.
      * @return This builder.
      */
    public com.yshi.avro.Avro1927.Builder setMyField(java.lang.String value) {
      validate(fields()[0], value);
      this.myField = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'myField' field has been set.
      * @return True if the 'myField' field has been set, false otherwise.
      */
    public boolean hasMyField() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'myField' field.
      * @return This builder.
      */
    public com.yshi.avro.Avro1927.Builder clearMyField() {
      myField = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public Avro1927 build() {
      try {
        Avro1927 record = new Avro1927();
        record.myField = fieldSetFlags()[0] ? this.myField : (java.lang.String) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
