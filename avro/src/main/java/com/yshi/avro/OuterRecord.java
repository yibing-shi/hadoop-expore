/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yshi.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OuterRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8252673536097216058L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OuterRecord\",\"namespace\":\"com.yshi.avro\",\"fields\":[{\"name\":\"ID\",\"type\":\"long\"},{\"name\":\"rec\",\"type\":{\"type\":\"record\",\"name\":\"InnerRecord\",\"fields\":[{\"name\":\"desc\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long ID;
  @Deprecated public com.yshi.avro.InnerRecord rec;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OuterRecord() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param rec The new value for rec
   */
  public OuterRecord(java.lang.Long ID, com.yshi.avro.InnerRecord rec) {
    this.ID = ID;
    this.rec = rec;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return rec;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.Long)value$; break;
    case 1: rec = (com.yshi.avro.InnerRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.Long getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.Long value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'rec' field.
   * @return The value of the 'rec' field.
   */
  public com.yshi.avro.InnerRecord getRec() {
    return rec;
  }

  /**
   * Sets the value of the 'rec' field.
   * @param value the value to set.
   */
  public void setRec(com.yshi.avro.InnerRecord value) {
    this.rec = value;
  }

  /**
   * Creates a new OuterRecord RecordBuilder.
   * @return A new OuterRecord RecordBuilder
   */
  public static com.yshi.avro.OuterRecord.Builder newBuilder() {
    return new com.yshi.avro.OuterRecord.Builder();
  }

  /**
   * Creates a new OuterRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OuterRecord RecordBuilder
   */
  public static com.yshi.avro.OuterRecord.Builder newBuilder(com.yshi.avro.OuterRecord.Builder other) {
    return new com.yshi.avro.OuterRecord.Builder(other);
  }

  /**
   * Creates a new OuterRecord RecordBuilder by copying an existing OuterRecord instance.
   * @param other The existing instance to copy.
   * @return A new OuterRecord RecordBuilder
   */
  public static com.yshi.avro.OuterRecord.Builder newBuilder(com.yshi.avro.OuterRecord other) {
    return new com.yshi.avro.OuterRecord.Builder(other);
  }

  /**
   * RecordBuilder for OuterRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OuterRecord>
    implements org.apache.avro.data.RecordBuilder<OuterRecord> {

    private long ID;
    private com.yshi.avro.InnerRecord rec;
    private com.yshi.avro.InnerRecord.Builder recBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yshi.avro.OuterRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rec)) {
        this.rec = data().deepCopy(fields()[1].schema(), other.rec);
        fieldSetFlags()[1] = true;
      }
      if (other.hasRecBuilder()) {
        this.recBuilder = com.yshi.avro.InnerRecord.newBuilder(other.getRecBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing OuterRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yshi.avro.OuterRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.rec)) {
        this.rec = data().deepCopy(fields()[1].schema(), other.rec);
        fieldSetFlags()[1] = true;
      }
      this.recBuilder = null;
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.Long getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public com.yshi.avro.OuterRecord.Builder setID(long value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public com.yshi.avro.OuterRecord.Builder clearID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'rec' field.
      * @return The value.
      */
    public com.yshi.avro.InnerRecord getRec() {
      return rec;
    }

    /**
      * Sets the value of the 'rec' field.
      * @param value The value of 'rec'.
      * @return This builder.
      */
    public com.yshi.avro.OuterRecord.Builder setRec(com.yshi.avro.InnerRecord value) {
      validate(fields()[1], value);
      this.recBuilder = null;
      this.rec = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'rec' field has been set.
      * @return True if the 'rec' field has been set, false otherwise.
      */
    public boolean hasRec() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'rec' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.yshi.avro.InnerRecord.Builder getRecBuilder() {
      if (recBuilder == null) {
        if (hasRec()) {
          setRecBuilder(com.yshi.avro.InnerRecord.newBuilder(rec));
        } else {
          setRecBuilder(com.yshi.avro.InnerRecord.newBuilder());
        }
      }
      return recBuilder;
    }

    /**
     * Sets the Builder instance for the 'rec' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.yshi.avro.OuterRecord.Builder setRecBuilder(com.yshi.avro.InnerRecord.Builder value) {
      clearRec();
      recBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'rec' field has an active Builder instance
     * @return True if the 'rec' field has an active Builder instance
     */
    public boolean hasRecBuilder() {
      return recBuilder != null;
    }

    /**
      * Clears the value of the 'rec' field.
      * @return This builder.
      */
    public com.yshi.avro.OuterRecord.Builder clearRec() {
      rec = null;
      recBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public OuterRecord build() {
      try {
        OuterRecord record = new OuterRecord();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.Long) defaultValue(fields()[0]);
        if (recBuilder != null) {
          record.rec = this.recBuilder.build();
        } else {
          record.rec = fieldSetFlags()[1] ? this.rec : (com.yshi.avro.InnerRecord) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
